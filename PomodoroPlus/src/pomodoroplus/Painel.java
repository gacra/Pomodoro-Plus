package pomodoroplus;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.text.MaskFormatter;

/**
 * Painel para a configuração de um período de tempo.
 * @author Guilherme
 */
public class Painel extends javax.swing.JPanel{

    //Janela que contêm os paineis
    private JPanel janela;
    //Barra de rolagem de janela
    private JScrollPane rolagem;
    //Janela principal do pragrama
    private JanelaPrincipal janelaPric;
    //Indica se o usuário escolheu um nome para o período
    private boolean nomePeriodoUsado = false;
    //Indica se o painel já foi incluído (Botão +)
    private boolean incluido = false;
    //Classe que representa o período de tempo
    Periodo periodo;
    //Ponteiro para o Programa do qual esse período fará parte
    Programa programa;
    
    boolean pronto = false;
    
    /**
     * Cria uma instância de Painel
     * @param janela Janela que contêm os paineis
     * @param rolagem Barra de rolagem de janela
     * @param janelaPric Janela principal do programa
     * @param programa Referência para o objeto Programa
     */
    public Painel(JPanel janela, JScrollPane rolagem, JanelaPrincipal janelaPric, Programa programa){
        this.janela = janela;
        this.rolagem = rolagem;
        this.janelaPric = janelaPric;
        this.programa = programa;
        initComponents();
        janelaPric.incCont();
        periodo = new Periodo(janelaPric.getCont());
        programa.getListaPaineis().add(this);
        programa.atualiza(this);
        pronto = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        duracao = new javax.swing.JLabel();
        nomePeriodo = new javax.swing.JTextField();
        ate = new javax.swing.JLabel();
        campoDuracao = new javax.swing.JFormattedTextField();
        labelAte = new javax.swing.JLabel();
        insereExclui = new javax.swing.JButton();

        setBackground(new java.awt.Color(2, 24, 43));
        setPreferredSize(new java.awt.Dimension(738, 40));

        duracao.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        duracao.setForeground(new java.awt.Color(255, 255, 255));
        duracao.setText("Duração:");

        nomePeriodo.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        nomePeriodo.setForeground(new java.awt.Color(102, 102, 102));
        nomePeriodo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nomePeriodo.setText("Nome do período");
        nomePeriodo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nomePeriodoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nomePeriodoFocusLost(evt);
            }
        });

        ate.setBackground(new java.awt.Color(255, 255, 255));
        ate.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        ate.setForeground(new java.awt.Color(255, 255, 255));
        ate.setText("Até:");

        campoDuracao.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoDuracao.setText("00 h 00 m 00 s");
        campoDuracao.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        campoDuracao.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                campoDuracaoCaretUpdate(evt);
            }
        });
        campoDuracao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                campoDuracaoFocusLost(evt);
            }
        });
        campoDuracao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                campoDuracaoMousePressed(evt);
            }
        });

        labelAte.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        labelAte.setForeground(new java.awt.Color(255, 255, 255));
        labelAte.setText("00 h 00 m 00 s");

        insereExclui.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/Mais.png"))); // NOI18N
        insereExclui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insereExcluiActionPerformed(evt);
            }
        });
        insereExclui.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                insereExcluiKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(nomePeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(duracao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoDuracao, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ate)
                .addGap(14, 14, 14)
                .addComponent(labelAte)
                .addGap(18, 18, 18)
                .addComponent(insereExclui)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insereExclui)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(duracao)
                        .addComponent(nomePeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ate)
                        .addComponent(campoDuracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelAte)))
                .addGap(8, 8, 8))
        );

        try{
            MaskFormatter maskID = new MaskFormatter("## h ## m ## s");
            maskID.setPlaceholderCharacter('0');
            maskID.install(campoDuracao);
        }catch(ParseException ex){}
    }// </editor-fold>//GEN-END:initComponents

    private void campoDuracaoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoDuracaoMousePressed
        int posicao = campoDuracao.getCaretPosition();
        if(posicao == 2 || posicao == 3 || posicao == 4){
            campoDuracao.setCaretPosition(5);
        }else if(posicao == 7 || posicao == 8 || posicao == 9|| posicao == 12 || posicao == 13|| posicao == 14){
            campoDuracao.setCaretPosition(10);
        }
    }//GEN-LAST:event_campoDuracaoMousePressed

    private void nomePeriodoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomePeriodoFocusGained
        if(nomePeriodoUsado == false){
            nomePeriodo.setText("");
            nomePeriodo.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_nomePeriodoFocusGained

    private void nomePeriodoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomePeriodoFocusLost
        nomePeriodoFocoPerdido();
    }//GEN-LAST:event_nomePeriodoFocusLost

    private void nomePeriodoFocoPerdido(){
        if(nomePeriodo.getText().contentEquals("")){
            nomePeriodo.setText("Nome do Período");
            nomePeriodo.setForeground(new java.awt.Color(102, 102, 102));
            nomePeriodoUsado = false;
        }else{
            nomePeriodo.setForeground(Color.BLACK);
            nomePeriodoUsado = true;
        }
    }
    
    private void campoDuracaoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_campoDuracaoCaretUpdate
        long tempo;
        String texto = campoDuracao.getText();
        if(texto.length() == 14 && pronto){
            tempo = Utils.string2ToLong(texto);
            periodo.setDuracao(tempo);
            programa.atualiza(this);
        }
    }//GEN-LAST:event_campoDuracaoCaretUpdate

    private void insereExcluiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_insereExcluiKeyTyped
        if((int) evt.getKeyChar() == 10){
            insereExclui.doClick();
        }
    }//GEN-LAST:event_insereExcluiKeyTyped

    private void insereExcluiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insereExcluiActionPerformed
        if(this.incluido == false){ //Insersão
            if(!Utils.testeZero(this.campoDuracao.getText())){
                ajustaPainel();
                criaNovoPainel();
            }else{
                this.campoDuracao.requestFocus();
            }
        }else{  //Exclusão
            removePainel();
        }
    }//GEN-LAST:event_insereExcluiActionPerformed

    private void campoDuracaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_campoDuracaoFocusLost
        campoDuracao.setText(Utils.longToString2(periodo.getDuracao()));
    }//GEN-LAST:event_campoDuracaoFocusLost

    /**
     *  Ajusta Painel para sua inclusão.
     */
    public void ajustaPainel(){
        if(!this.nomePeriodoUsado){
            this.nomePeriodo.setText("Período " + String.valueOf(janelaPric.getCont()));
            this.nomePeriodo.setForeground(Color.black);
            this.nomePeriodoUsado = true;
        }
        this.insereExclui.setIcon(new ImageIcon(getClass().getResource("/Figuras/Lixo.png")));
    }
     
    /**
    *   Cria um novo painel, ajustando o tamanho da janela.
     * @return Painel criado.
    */
    public Painel criaNovoPainel(){
        Painel novoPainel = new Painel(janela, rolagem, janelaPric, programa);
        janela.setPreferredSize(new Dimension(novoPainel.getWidth(),janelaPric.getCont()*(40+(((FlowLayout)janela.getLayout()).getVgap()))));
        janela.setVisible(true);
        janela.add(novoPainel);
        janelaPric.setVisible(true);
        this.rolagem.getVerticalScrollBar().setValue(this.rolagem.getVerticalScrollBar().getMaximum());
        novoPainel.getNomePeriodo().requestFocus();
        this.incluido = true;
        return novoPainel;
    }
    
    /**
     * Remove um painel, bem como o seu período correspondente da lista.
     */
    public void removePainel(){
        this.programa.atualizaExclusao(this);
        this.programa.getListaPaineis().remove(this);
        this.janela.remove(this);
        this.janela.repaint();
        this.janelaPric.repaint();
        this.janelaPric.decCont();
        janela.setPreferredSize(new Dimension(this.getWidth(),janelaPric.getCont()*(40+(((FlowLayout)janela.getLayout()).getVgap()))));
    }
    
    /**
     * Remove esse painel (usado no caso de todos os paineis estarem sendo removidos).
     * Não altera a lista de Paineis.
     */
    public void removeQuandoTodos(){
        this.janela.remove(this);
        this.janela.repaint();
        this.janelaPric.repaint();
        this.janelaPric.decCont();
    }
    
    /**
     * Finaliza o painel para o início da cronometragem do programada.
     */
    public void finalizaPainel(){
        if(nomePeriodo.isFocusOwner()){
            nomePeriodoFocoPerdido();
        }
        if(this.nomePeriodoUsado){
            this.periodo.setNome(this.nomePeriodo.getText());
        }else{
            this.periodo.setNome("Período");
        }
    }
    
    /**
     * Clona o período associdado a esse painel.
     * @return Período clonado.
     */
    public Periodo getClonePeriodo(){
        try{
            return (Periodo) this.periodo.clone();
        }catch(CloneNotSupportedException ex){
            Logger.getLogger(Painel.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
    
    /**
     * Associa esse painel a uma período pré-existente.
     * @param periodo Periodo a ser assocido ao painel.
     */
    public void setPeriodo(Periodo periodo){
        this.periodo = periodo;
        this.nomePeriodo.setText(periodo.getNome());
        nomePeriodoFocoPerdido();
        this.campoDuracao.setText(Utils.longToString2(periodo.getDuracao()));
    }

    public Periodo getPeriodo(){
        return periodo;
    }

    public JTextField getNomePeriodo(){
        return nomePeriodo;
    }

    public JLabel getLabelAte(){
        return labelAte;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ate;
    private javax.swing.JFormattedTextField campoDuracao;
    private javax.swing.JLabel duracao;
    private javax.swing.JButton insereExclui;
    public javax.swing.JLabel labelAte;
    private javax.swing.JTextField nomePeriodo;
    // End of variables declaration//GEN-END:variables
}
